name: CI para Node.js

# Ejecutar el flujo de trabajo en eventos push o pull request
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up SSH
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Verify Docker access
      run: docker ps
      
    - name: Deploy to VM
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.VM_USER }}@${{ secrets.VM_IP }} << 'EOF'
          cd /home/sergiohervas18/CloudComputing1MII/WildHaven/
          git pull
          docker-compose pull
          docker-compose down
          docker-compose up -d --build
        EOF

  pruebas_cluster:
    runs-on: ubuntu-latest
    needs: pruebas  # Dependencia en el trabajo 'pruebas', para asegurar que solo se ejecute si los tests pasan

    steps:
      # Clonar el repositorio
      - name: Clonar el repositorio
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "NODE_ENV=development" > .env
          
      # Configurar Docker y Docker Compose
      - name: Configurar Docker Compose
        run: |
          sudo apt-get install docker-compose -y

      # Construir las im√°genes de Docker con 'docker-compose'
      - name: Construir im√°genes de Docker
        run: |
          docker-compose build --no-cache
        working-directory: './WildHaven'

      # Iniciar los contenedores usando Docker Compose
      - name: Iniciar contenedores con Docker Compose
        run: |
          docker-compose up -d
        working-directory: './WildHaven'

      - name: Verificar contenedores despu√©s de iniciar con Docker Compose
        run: |
          docker-compose ps
        working-directory: './WildHaven'

      - name: Verificar estado de los contenedores
        run: |
          docker ps -a

      - name: Consultar logs de la aplicaci√≥n Node.js
        run: |
          CONTAINER_ID=$(docker ps -qf "name=node-app")
          if [ -n "$CONTAINER_ID" ]; then
            docker logs $CONTAINER_ID
          else
            echo "El contenedor node-app no est√° en ejecuci√≥n"
          fi

      # Esperar a que las aplicaciones est√©n disponibles (m√°ximo 1 minuto)
      - name: Esperar disponibilidad de la app Angular
        run: |
          SECONDS=0
          while ! curl --fail --silent --output /dev/null http://localhost:4200; do
            echo "Esperando a que la app Angular est√© disponible..."
            sleep 5
            if [ $SECONDS -ge 60 ]; then
              echo "Tiempo de espera agotado para la app Angular" && exit 1
            fi
          done
          echo "La app Angular est√° disponible!"

      - name: Esperar disponibilidad de la app Loki
        run: |
          SECONDS=0
          while ! curl --fail --silent --output /dev/null http://localhost:3100/ready; do
            echo "Esperando a que la app Loki est√© disponible..."
            sleep 5
            if [ $SECONDS -ge 60 ]; then
              echo "Tiempo de espera agotado para la app Loki" && exit 1
            fi
          done
          echo "La app Loki est√° disponible!"

      - name: Esperar disponibilidad de la app Grafana
        run: |
          SECONDS=0
          while ! curl --fail --silent --output /dev/null http://localhost:3000; do
            echo "Esperando a que la app Grafana est√© disponible..."
            sleep 5
            if [ $SECONDS -ge 60 ]; then
              echo "Tiempo de espera agotado para la app Grafana" && exit 1
            fi
          done
          echo "La app Grafana est√° disponible!"

      - name: Verificar estado de los contenedores
        run: |
          NOT_UP=$(docker ps -a --filter "status=exited" --filter "status=created" --quiet)
          if [ -n "$NOT_UP" ]; then
            echo "Algunos contenedores no est√°n en estado 'Up':"
            docker ps -a --filter "status=exited" --filter "status=created"
            exit 1
          else
            echo "Todos los contenedores est√°n en estado 'Up'."
          fi

      # Hacer peticiones HTTP para verificar que los contenedores respondan correctamente
      - name: Realizar peticiones HTTP para verificar respuesta
        run: |
          curl --fail --verbose http://localhost:3800/api/user/pruebas
          curl --fail --verbose http://localhost:4200/
          curl --fail --verbose http://localhost:3100/ready
          curl --fail --verbose http://localhost:3000

      # Detener los contenedores despu√©s de las pruebas
      - name: Detener contenedores de Docker
        run: |
          docker-compose down
        working-directory: './WildHaven'

  pruebas:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:latest
        ports:
          - 27017:27017

    steps:
      # Clonar el repositorio
      - name: Clonar el repositorio
        uses: actions/checkout@v4

      # Configurar la versi√≥n de Node.js
      - name: Configurar Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Puedes ajustar la versi√≥n de Node.js seg√∫n lo que uses

      # Instalar dependencias
      - name: Instalar dependencias
        run: npm install
        working-directory: './WildHaven/backend'

      # Esperar a que MongoDB est√© listo
      - name: Esperar a que MongoDB est√© listo
        run: |
          SECONDS=0
          until nc -z localhost 27017; do
            echo "Esperando a que MongoDB est√© disponible...";
            sleep 1;
            if [ $SECONDS -ge 60 ]; then
              echo "Tiempo de espera agotado para MongoDB" && exit 1
            fi
          done

      # Ejecutar pruebas
      - name: Ejecutar pruebas
        run: npm test
        working-directory: './WildHaven/backend'
        env:
          MONGODB_URI: mongodb://localhost:27017/wildhaven-test  # URI para MongoDB local

  construir_y_subir:
    runs-on: ubuntu-latest
    needs: pruebas_cluster  # Dependencia en el trabajo 'pruebas_cluster', para asegurar que solo se ejecute si las pruebas del cl√∫ster pasan

    steps:
      # Clonar el repositorio
      - name: Clonar el repositorio
        uses: actions/checkout@v4

      # Iniciar sesi√≥n en GitHub Container Registry (GHCR)
      - name: Iniciar sesi√≥n en el GHCR
        run: |
          echo ${{ secrets.TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # Paso para construir la imagen Docker
      - name: Construir imagen Docker
        run: |
          docker build -t ghcr.io/sergiohrvas/wildhaven:app-node ./WildHaven/backend

      # Paso para subir la imagen Docker al GitHub Container Registry
      - name: Subir imagen Docker al GHCR
        run: |
          docker push ghcr.io/sergiohrvas/wildhaven:app-node

      - name: Imprimir estado del trabajo
        run: echo "üçè El estado de este trabajo es ${{ job.status }}."
